# Author: Gregor Boehl [mail@gregorboehl.com]
---
name: 'hank'
description: 'A small example HANK model with one asset'
# the functions_file contains longer definitions, e.g. of the value function 'hh'
# the path is relative to the location of this yaml
functions_file: 'model_functions.py'

definitions: |
    from jax.numpy import log, maximum
    # jax_print can be used for debugging
    from econpizza.tools import percentile, jax_print

# these lists define the relevant models objects
variables: [ DIV, y, y_prod, w, pi, R, Rn, Rstar, z, beta, C, n, B, Top10C, Top10A, piwn, wn,  G, RBr, T,   revenue, Z, E, MPC, lowest_q_mpc, tau_l, D, UC] #, tau, g , wn G, piwn , u, nn tau_l,
parameters: [ sigma_c, sigma_l, theta, psi, phi_pi, phi_y, rho, rho_beta, rho_r, rho_z, psi_w, theta_w, wage_markup, chi, iota, rho_g, rho_B, rho_d, rho_t , rho_tau, phi_T, phi_G, tau_p, phi_B,  gamma_bb, gamma_bp, gamma_by, gamma_B, gamma_y]
shocks: [ e_beta, e_rstar, e_z, e_t, e_g, e_d , e_tau, e_B]

distributions:
  dist:
    skills:
      type: exogenous_rouwenhorst
      rho: 0.966
      sigma: 0.92
      n: 11
    a:
      type: endogenous_log
      min: 0.0
      max: 200
      n: 100

decisions:
  inputs: [WaPrime]
  calls: |

    z_grid = Z * skills_grid ** (1-tau_p) / jnp.sum(skills_stationary * (skills_grid ** (1-tau_p)))

    tfs = transfers(skills_stationary, T, DIV, skills_grid)
    WaPrimeExp = skills_transition @ WaPrime
    Wa, a, c, uc = egm_step(WaPrimeExp, a_grid, skills_grid, z_grid, n, tfs, RBr, beta, sigma_c, sigma_l, tau_p, chi)
    mpc = compute_weighted_mpc(c, a, a_grid, RBr, skills_grid, tau_p )

  outputs: [a,c, uc, mpc]

aux_equations: |
    # NOTE: summing over the first two dimensions e and a, but not the time dimension (dimension 2)
    # `dist` here corresponds to the dist *at the beginning of the period*

    aggr_a = jnp.sum(dist*a, axis=(0,1))
    aggr_c = jnp.sum(dist*c, axis=(0,1))
    aggr_mpc = jnp.sum(dist*mpc, axis=(0,1))
    aggr_uc = jnp.sum(dist*uc, axis=(0,1))

    # calculate consumption and wealth share of top-10%
    top10c = 1 - percentile(c, dist, .9)
    top10a = 1 - percentile(a, dist, .9)
    # low income mpcs
    low_mpc = percentile(mpc, dist, .75)

    # average "skills" after progresive taxes
    e_mean = jnp.sum(skills_stationary*(skills_grid** (1-tau_p)))

# final/main stage: aggregate equations
equations:

    # definitions
    ~ aggr_uc = UC
    ~ C = aggr_c
    ~ Top10C = top10c
    ~ Top10A = top10a
    ~ e_mean = E
    ~ MPC = aggr_mpc
    ~ lowest_q_mpc = low_mpc

    # firms
    ~ y_prod = z*n # production function
    ~ DIV = -w*n + (1 - psi*(pi/piSS - 1)**2/2)*y_prod # dividends
    ~ y = (1 - psi*(pi/piSS - 1)**2/2)*y_prod # "effective" output
    ~ psi*(pi/piSS - 1)*pi/piSS = (1-theta) + theta*w/z + psi*piPrime/R*(piPrime/piSS - 1)*piPrime/piSS*y_prodPrime/y_prod # NKPC

    # Union
    ~ piwn = wn/wnLag*pi # wage inflation (notional)

    ~ psi_w*(piwn/piwnSS - 1)*piwn/piwnSS = psi_w*beta*(piwnPrime/piwnSS - 1)*piwnPrime/piwnSS + theta_w *(chi*n**(1+sigma_l)*UC+(1-theta_w)/theta_w*(1-tau_p)*UC*Z/E) # wage Phillips curve

    ~ w = maximum(iota*wLag/pi, wn)  # dnwr


    # government
    ~ Z = w*n - revenue # post-tax average income
    ~ D  = (RBr-1)*BLag + G + T - revenue  # deficit
    ~ revenue = tau_l*w*n*E
    # ~ deficit = B - BLag # one can easily check that D = deficit
    ~ tau_l/tau_lSS  = (tau_lLag/tau_lSS)**rho_tau*(BLag/BSS)**((1-rho_tau)*gamma_B)


    ~ RBr = RLag/pi  # real ex-post bond return
    ~ Rn = (Rstar*((pi/piSS)**phi_pi)*((y/yLag)**phi_y))**(1-rho)*RnLag**rho # MP rule on shadow nominal rate
    ~ R = maximum(1, Rn) # ZLB

    # clearing conditions
    ~ C + G = y # market clearing  ## should deficit be included here?
    ~ B = aggr_a # bond market clearing

    # exogenous
    ~ G = GSS*(GLag/GSS)**rho_g*exp(e_g) # exogenous gov. spending
    ~ beta = betaSS*(betaLag/betaSS)**rho_beta*exp(e_beta) # exogenous beta
    ~ Rstar = RstarSS*(RstarLag/RstarSS)**rho_r*exp(e_rstar) # exogenous rstar
    ~ z = zSS*(zLag/zSS)**rho_z*exp(e_z) # exogenous technology
    # ~ B = BSS*(BLag/BSS)**rho_B*exp(e_B)
    # ~ d = (dLag/dSS)**rho_B*exp(e_B) # exogenous debt
    ~ T = TSS**(1-rho_t)*TLag**rho_t*exp(e_t) # exogenous transfers
    # ~ tau_l = tau_l**(1-rho_tau)*tau_lLag**rho_tau*exp(e_tau)


steady_state:
    fixed_values:
        # parameters:
        sigma_c: 2 # intertemporal elasticity of substitution
        sigma_l: 2 # inverse Frisch elasticity of labour supply
        theta: 10. # elasticity of substitution
        theta_w: 10. # elasticity of substitution labor
        psi_w:  322.58
        chi: 0.60013305 # labor disutility
        wage_markup: theta_w/(theta_w - 1) # wage markup
        psi:  43.1 # 37.03 #67.7 # parameter on the costs of price adjustment
        phi_pi: 1.2 # Taylor rule coefficient on inflation
        phi_y: 0. # Taylor rule coefficient on output
        rho: 0.8 # persistence in (notional) nominal interest rate
        rho_beta: 0.9 # persistence of discount factor shock
        rho_r: 0.8 # persistence of MP shock
        rho_z: 0.9 # persistence of technology shocks
        rho_g: 0.9 # persistence of gov. spending shocks
        rho_t: 0.7 # persistence of transfers shocks
        rho_B: 0.9 # persistence of bond supply shocks
        rho_d: 0.9 # persistence of deficit shocks
        iota: 0. # 0.98 # dnwr
        tau_p: 0.120 # 0.120
        rho_tau: 0.8
        gamma_B: 0.4 #0.4

        # steady state
        # y: 1.0 # effective output
        D: 0
        deficit: 0
        z: 1 # technology
        G: 0.0922 # y*0.04 # gov. increase spending
        # C: y-G
        # RBr: 1
        T: 0.082
        # y_prod: 1.0 # output
        # C: 1.0 # consumption
        pi:  1.02^0.25 # inflation
        # piwn: pi # wage inflation
        beta: 0.93880593  # discount factor
        B: 0.97122222 # bond supply
        # MPC: 0.26
        # tau_l: 0.20207428  #tax rate # clears government budget
        # Top10A: 0.72
        # Rstar: 1.02^0.25


    init_guesses:
        Rstar: 1.02^0.25 # steady state target rages # if we begin with RSS it does not find the SS.
        # Rr: Rstar # steady state real rage
        Rn: Rstar # steady state notional rage
        R: Rstar # steady state nominal rage
        tau_l: 0.24592277
        RBr: Rstar/pi
        # y: 1
        # B: 1.2
        # chi: 0.6
        UC: 1


        WaPrime: egm_init(a_grid, skills_stationary)
